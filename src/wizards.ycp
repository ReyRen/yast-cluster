/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/cluster/wizards.ycp
 * Package:	Configuration of cluster
 * Summary:	Wizards definitions
 * Authors:	Cong Meng <cmeng@novell.com>
 *
 * $Id: wizards.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{

textdomain "cluster";

import "Sequencer";
import "Wizard";

include "cluster/complex.ycp";
include "cluster/dialogs.ycp";
include "cluster/common.ycp";

map Aliases = $[
	"communication":  ``(CommunicationDialog()),
	"security":   ``(SecurityDialog()),
	"service": ``(ServiceDialog())
		];


any TabSequence() {
    map anywhere = $[ `abort:`abort, `next:`next ];
    foreach(string key, DIALOG, { anywhere = add(anywhere, symbolof(toterm(key)), key); });

    map sequence = $[ "ws_start" : DIALOG[0]:"" ];
    foreach(string key, DIALOG, { sequence = add(sequence, key, anywhere); });

    // UI initialization
    Wizard::OpenTreeNextBackDialog();

    list<map> tree = [];
    foreach(string key, DIALOG,
    {
        tree = Wizard::AddTreeItem( tree, PARENT[key]:"",  NAME[key]:"", key);
    });

    Wizard::CreateTree(tree, "Cluster");

    // Buttons redefinition
    Wizard::SetNextButton(`next, Label::FinishButton());

    if (UI::WidgetExists(`id(`wizardTree))) {
        Wizard::SetBackButton(`help, Label::HelpButton());
        Wizard::SetAbortButton(`abort, Label::CancelButton());
    } else {
        UI::WizardCommand(`SetNextButtonLabel( Label::FinishButton() ) );
        UI::WizardCommand(`SetAbortButtonLabel( Label::CancelButton() ) );
        Wizard::HideBackButton();
    }

    Wizard::SelectTreeItem(sequence["ws_start"]:"");

    any ret = Sequencer::Run(Aliases, sequence);
    return ret;
}

any FirstRunSequence() {
	map sequence = $[
		"ws_start" : "communication",
		"communication": $[ `next:"security", `back:"communication", `abort:`abort ],
		"security": $[ `next:"service", `back:"communication", `abort:`abort ],
		"service": $[ `next:`next, `back:"security", `abort:`abort ],
			];

	any ret = Sequencer::Run(Aliases, sequence);

	return ret;
}

any MainSequence()
{
	if (Cluster::firstrun) {
		return FirstRunSequence();
	} else {
		return TabSequence();
	}
}

/**
 * Whole configuration of cluster
 * @return sequence result
 */
any ClusterSequence() {

    map aliases = $[
	"read"	: [ ``( ReadDialog() ), true ],
	"main"	:   ``( MainSequence() ),
	"write"	: [ ``( WriteDialog() ), true ]
    ];

    map sequence = $[
	"ws_start" : "read",
	"read" : $[
	    `abort	: `abort,
	    `next	: "main"
	],
	"main" : $[
	    `abort	: `abort,
	    `next	: "write"
	],
	"write" : $[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    Wizard::CreateDialog();

    any ret = Sequencer::Run(aliases, sequence);

    UI::CloseDialog();
    return ret;
}

/**
 * Whole configuration of cluster but without reading and writing.
 * For use with autoinstallation.
 * @return sequence result
 */
any ClusterAutoSequence() {

    /* Initialization dialog caption */
    string caption = _("Cluster Configuration");
    /* Initialization dialog contents */
    term contents = `Label(_("Initializing..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
	    Label::BackButton(), Label::NextButton());

    any ret = MainSequence();

    UI::CloseDialog();
    return ret;
}

/* EOF */
}
